San Francisco Rental Prices Dashboard
In this notebook, you will compile the visualizations from the previous analysis into functions that can be used for a Panel dashboard.

# imports
from panel.interact import interact
import panel as pn
pn.extension('plotly')
import plotly.express as px
import pandas as pd
import hvplot.pandas
import matplotlib.pyplot as plt
import os
from pathlib import Path
from dotenv import load_dotenv
# Read the Mapbox API key
load_dotenv()
map_box_api = os.getenv("mapbox")
px.set_mapbox_access_token(map_box_api)
Import Data
# Import the necessary CSVs to Pandas DataFrames
# Read the census data into a Pandas DataFrame
file_path = Path("sfo_neighborhoods_census_data.csv")
sfo_data = pd.read_csv(file_path, index_col="year")
sfo_means=sfo_data.groupby(['year','neighborhood']).mean()
n_means=sfo_data.groupby('neighborhood').mean().reset_index()
file_path = Path("neighborhoods_coordinates.csv")
loc_data = pd.read_csv(file_path)
file_path = Path("housing_units_mean.csv")
sfo_housing_mean = pd.read_csv(file_path, index_col="year")
​
Panel Visualizations
In this section, you will copy the code for each plot type from your analysis notebook and place it into separate functions that Panel can use to create panes for the dashboard.

These functions will convert the plot object to a Panel pane.

Be sure to include any DataFrame transformation/manipulation code required along with the plotting code.

Return a Panel pane object from each function that can be used to build the dashboard.

Note: Remove any .show() lines from the code. We want to return the plots instead of showing them. The Panel dashboard will then display the plots.

def housing_units_per_year():
    """Housing Units Per Year."""
    housing_plot= sfo_housing_mean.plot(y='housing_units', kind="bar", title = "Average housing Units", ylim=[372000,385000])
    
    housing_img= pn.panel(housing_plot)
    
    return housing_img
housing_units_per_year()

# Define Panel Visualization Functions
def housing_units_per_year():
    """Housing Units Per Year."""
    housing_plot= sfo_housing_mean.plot(y='housing_units', kind="bar", title = "Average housing Units", ylim=[372000,385000])
    
    housing_img= pn.panel(housing_plot)
    
    return housing_img
​
# Render plot with Panel interactive widget
pn.interact(housing_units_per_year)
  
​
​
def average_gross_rent():
    """Average Gross Rent in San Francisco Per Year."""
    avg_rent_price=sfo_data.groupby("year")["gross_rent"].mean().reset_index() 
    
    plot= avg_rent_price.plot(x= 'year', y='gross_rent', kind="line", title = "Average Rent Price", colormap='autumn')
    
    disp = pn.panel(plot)
    return disp
​
​
​
def average_sales_price():
    """Average Sales Price Per Year."""
    avg_sales_price=sfo_data.groupby("year")["sale_price_sqr_foot"].mean().reset_index()
    plot= avg_sales_price.plot(x= 'year', y='sale_price_sqr_foot', kind="line", title = "Average Sales Price")
    avgsales_img= pn.panel(plot)
    return avgsales_img
​
​
​
def average_price_by_neighborhood():
    """Average Prices by Neighborhood."""
    sfo_means=sfo_data.groupby(['year','neighborhood']).mean()
    plot= sfo_means.hvplot.line(x="year", y ='sale_price_sqr_foot', width=600,  title="Avg Price per sq ft", groupby='neighborhood').opts(yformatter="%.0f")
    avgprice_img= pn.panel(plot)
    return avgprice_img
​
​
def top_most_expensive_neighborhoods():
    """Top 10 Most Expensive Neighborhoods."""
    df_expensive_neighborhoods_10 = sfo_data.groupby(by="neighborhood").mean().head(10).sort_values("sale_price_sqr_foot", ascending=False).reset_index()
    fig= px.bar(df_expensive_neighborhoods_10, x="neighborhood",y="sale_price_sqr_foot")
    top_exp_img= pn.panel(fig)
    return top_exp_img
​
​
def most_expensive_neighborhoods_rent_sales():
    """Comparison of Rent and Sales Prices of Most Expensive Neighborhoods."""   
    plot= sfo_means.hvplot.line(x="year", y =['gross_rent', 'sale_price_sqr_foot'], value_label='Price', subplots=True, width=300,  title="Avg Monthly Costs", groupby='neighborhood').opts(yformatter="%.0f")
    top_rent_img= pn.panel(plot)
    return top_rent_img
​
# ---------Optional--------------------
    
# def parallel_coordinates():
#     """Parallel Coordinates Plot."""
​
#     # YOUR CODE HERE!
​
​
​
# def parallel_categories():
#     """Parallel Categories Plot."""
    
#     # YOUR CODE HERE!
​
​
​
def neighborhood_map():
    """Neighborhood Map."""
​
    avg_loc_df=pd.merge(loc_data,n_means,how="inner", on ="neighborhood")
    px.set_mapbox_access_token(map_box_api)
    plot= px.scatter_mapbox(avg_loc_df,
             lat="Lat",
             lon = "Lon",
             size= "sale_price_sqr_foot",
             color= "neighborhood",
             zoom =4)
    neighborhood_img= pn.panel(plot)
    return neighborhood_img
  
​

Panel Dashboard
In this section, you will combine all of the plots into a single dashboard view using Panel. Be creative with your dashboard design!

​
# Create row and Title for the Dashboard
row_of_stats = pn.Row(housing_units_per_year(), average_gross_rent(), average_sales_price())
row_of_neigh = pn.Row(top_most_expensive_neighborhoods(), most_expensive_neighborhoods_rent_sales(),average_price_by_neighborhood())
row_of_map = pn.Row(neighborhood_map(), average_price_by_neighborhood(), most_expensive_neighborhoods_rent_sales())
                    
plots_as_column = pn.Column(
    "#San Francisco Real Estate Dashboard", row_of_map
)
plots_as_column
​
​
# # Create tabs
# tabs = pn.Tabs(
#     ##("All Plots", plots_as_column),
#     ("Statistical Plots", row_of_stats),
#     ("Neighboorhood View", row_of_neigh)
# )
# tabs
​
​
WARNING:param.dynamic_operation: Callable raised "ValueError("Unexpected option 'yformatter' for NdLayout type across all extensions. No similar options found.")".
Invoked as dynamic_operation('Alamo Square')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
~\Anaconda3\envs\pyviz\lib\site-packages\IPython\core\formatters.py in __call__(self, obj, include, exclude)
    968 
    969             if method is not None:
--> 970                 return method(include=include, exclude=exclude)
    971             return None
    972         else:

~\Anaconda3\envs\pyviz\lib\site-packages\panel\viewable.py in _repr_mimebundle_(self, include, exclude)
    586         doc = _Document()
    587         comm = state._comm_manager.get_server_comm()
--> 588         model = self._render_model(doc, comm)
    589         ref = model.ref['id']
    590         manager = CommManager(comm_id=comm.id, plot_id=ref)

~\Anaconda3\envs\pyviz\lib\site-packages\panel\viewable.py in _render_model(self, doc, comm)
    425         if comm is None:
    426             comm = state._comm_manager.get_server_comm()
--> 427         model = self.get_root(doc, comm)
    428 
    429         if config.embed:

~\Anaconda3\envs\pyviz\lib\site-packages\panel\viewable.py in get_root(self, doc, comm, preprocess)
    482         """
    483         doc = init_doc(doc)
--> 484         root = self._get_model(doc, comm=comm)
    485         if preprocess:
    486             self._preprocess(root)

~\Anaconda3\envs\pyviz\lib\site-packages\panel\layout\base.py in _get_model(self, doc, root, parent, comm)
    111         if root is None:
    112             root = model
--> 113         objects = self._get_objects(model, [], doc, root, comm)
    114         props = dict(self._init_params(), objects=objects)
    115         model.update(**self._process_param_change(props))

~\Anaconda3\envs\pyviz\lib\site-packages\panel\layout\base.py in _get_objects(self, model, old_objects, doc, root, comm)
    101             else:
    102                 try:
--> 103                     child = pane._get_model(doc, root, model, comm)
    104                 except RerenderError:
    105                     return self._get_objects(model, current_objects[:i], doc, root, comm)

~\Anaconda3\envs\pyviz\lib\site-packages\panel\layout\base.py in _get_model(self, doc, root, parent, comm)
    111         if root is None:
    112             root = model
--> 113         objects = self._get_objects(model, [], doc, root, comm)
    114         props = dict(self._init_params(), objects=objects)
    115         model.update(**self._process_param_change(props))

~\Anaconda3\envs\pyviz\lib\site-packages\panel\layout\base.py in _get_objects(self, model, old_objects, doc, root, comm)
    101             else:
    102                 try:
--> 103                     child = pane._get_model(doc, root, model, comm)
    104                 except RerenderError:
    105                     return self._get_objects(model, current_objects[:i], doc, root, comm)

~\Anaconda3\envs\pyviz\lib\site-packages\panel\layout\base.py in _get_model(self, doc, root, parent, comm)
    111         if root is None:
    112             root = model
--> 113         objects = self._get_objects(model, [], doc, root, comm)
    114         props = dict(self._init_params(), objects=objects)
    115         model.update(**self._process_param_change(props))

~\Anaconda3\envs\pyviz\lib\site-packages\panel\layout\base.py in _get_objects(self, model, old_objects, doc, root, comm)
    101             else:
    102                 try:
--> 103                     child = pane._get_model(doc, root, model, comm)
    104                 except RerenderError:
    105                     return self._get_objects(model, current_objects[:i], doc, root, comm)

~\Anaconda3\envs\pyviz\lib\site-packages\panel\pane\holoviews.py in _get_model(self, doc, root, parent, comm)
    237             plot = self.object
    238         else:
--> 239             plot = self._render(doc, comm, root)
    240 
    241         plot.pane = self

~\Anaconda3\envs\pyviz\lib\site-packages\panel\pane\holoviews.py in _render(self, doc, comm, root)
    302                 kwargs['comm'] = comm
    303 
--> 304         return renderer.get_plot(self.object, **kwargs)
    305 
    306     def _cleanup(self, root):

~\Anaconda3\envs\pyviz\lib\site-packages\holoviews\plotting\bokeh\renderer.py in get_plot(self_or_cls, obj, doc, renderer, **kwargs)
     71         combining the bokeh model with another plot.
     72         """
---> 73         plot = super(BokehRenderer, self_or_cls).get_plot(obj, doc, renderer, **kwargs)
     74         if plot.document is None:
     75             plot.document = Document() if self_or_cls.notebook_context else curdoc()

~\Anaconda3\envs\pyviz\lib\site-packages\holoviews\plotting\renderer.py in get_plot(self_or_cls, obj, doc, renderer, comm, **kwargs)
    218 
    219         # Initialize DynamicMaps with first data item
--> 220         initialize_dynamic(obj)
    221 
    222         if not renderer:

~\Anaconda3\envs\pyviz\lib\site-packages\holoviews\plotting\util.py in initialize_dynamic(obj)
    250             continue
    251         if not len(dmap):
--> 252             dmap[dmap._initial_key()]
    253 
    254 

~\Anaconda3\envs\pyviz\lib\site-packages\holoviews\core\spaces.py in __getitem__(self, key)
   1339         # Not a cross product and nothing cached so compute element.
   1340         if cache is not None: return cache
-> 1341         val = self._execute_callback(*tuple_key)
   1342         if data_slice:
   1343             val = self._dataslice(val, data_slice)

~\Anaconda3\envs\pyviz\lib\site-packages\holoviews\core\spaces.py in _execute_callback(self, *args)
   1108 
   1109         with dynamicmap_memoization(self.callback, self.streams):
-> 1110             retval = self.callback(*args, **kwargs)
   1111         return self._style(retval)
   1112 

~\Anaconda3\envs\pyviz\lib\site-packages\holoviews\core\spaces.py in __call__(self, *args, **kwargs)
    712 
    713         try:
--> 714             ret = self.callable(*args, **kwargs)
    715         except KeyError:
    716             # KeyError is caught separately because it is used to signal

~\Anaconda3\envs\pyviz\lib\site-packages\holoviews\util\__init__.py in dynamic_operation(*key, **kwargs)
   1041         def dynamic_operation(*key, **kwargs):
   1042             key, obj = resolve(key, kwargs)
-> 1043             return apply(obj, *key, **kwargs)
   1044 
   1045         operation = self.p.operation

~\Anaconda3\envs\pyviz\lib\site-packages\holoviews\util\__init__.py in apply(element, *key, **kwargs)
   1033         def apply(element, *key, **kwargs):
   1034             kwargs = dict(util.resolve_dependent_kwargs(self.p.kwargs), **kwargs)
-> 1035             processed = self._process(element, key, kwargs)
   1036             if (self.p.link_dataset and isinstance(element, Dataset) and
   1037                 isinstance(processed, Dataset) and processed._dataset is None):

~\Anaconda3\envs\pyviz\lib\site-packages\holoviews\util\__init__.py in _process(self, element, key, kwargs)
   1017             return self.p.operation.process_element(element, key, **kwargs)
   1018         else:
-> 1019             return self.p.operation(element, **kwargs)
   1020 
   1021     def _dynamic_operation(self, map_obj):

~\Anaconda3\envs\pyviz\lib\site-packages\holoviews\core\accessors.py in <lambda>(obj, **dynkwargs)
    623 
    624         obj = self._obj if clone else self._obj.clone()
--> 625         dmap = Dynamic(obj, operation=lambda obj, **dynkwargs: obj.opts(*args, **kwargs),
    626                        streams=self._obj.streams, link_inputs=True)
    627         if not clone:

~\Anaconda3\envs\pyviz\lib\site-packages\holoviews\core\accessors.py in pipelined_call(*args, **kwargs)
     35             if not hasattr(inst._obj, '_pipeline'):
     36                 # Wrapped object doesn't support the pipeline property
---> 37                 return __call__(*args, **kwargs)
     38 
     39             inst_pipeline = copy.copy(inst._obj. _pipeline)

~\Anaconda3\envs\pyviz\lib\site-packages\holoviews\core\accessors.py in __call__(self, *args, **kwargs)
    571                 param.main.param.warning(msg)
    572 
--> 573         return self._dispatch_opts( *args, **kwargs)
    574 
    575     def _dispatch_opts(self, *args, **kwargs):

~\Anaconda3\envs\pyviz\lib\site-packages\holoviews\core\accessors.py in _dispatch_opts(self, *args, **kwargs)
    575     def _dispatch_opts(self, *args, **kwargs):
    576         if self._mode is None:
--> 577             return self._base_opts(*args, **kwargs)
    578         elif self._mode == 'holomap':
    579             return self._holomap_opts(*args, **kwargs)

~\Anaconda3\envs\pyviz\lib\site-packages\holoviews\core\accessors.py in _base_opts(self, *args, **kwargs)
    654 
    655         kwargs['clone'] = False if clone is None else clone
--> 656         return self._obj.options(*new_args, **kwargs)

~\Anaconda3\envs\pyviz\lib\site-packages\holoviews\core\dimension.py in options(self, *args, **kwargs)
   1301             expanded_backends = opts._expand_by_backend(options, backend)
   1302         else:
-> 1303             expanded_backends = [(backend, opts._expand_options(options, backend))]
   1304 
   1305         obj = self

~\Anaconda3\envs\pyviz\lib\site-packages\holoviews\util\__init__.py in _expand_options(cls, options, backend)
    376                     valid_options += group_opts.allowed_keywords
    377                 if found: continue
--> 378                 cls._options_error(opt, objtype, backend, valid_options)
    379         return expanded
    380 

~\Anaconda3\envs\pyviz\lib\site-packages\holoviews\util\__init__.py in _options_error(cls, opt, objtype, backend, valid_options)
    426             raise ValueError('Unexpected option %r for %s type '
    427                              'across all extensions. No similar options '
--> 428                              'found.' % (opt, objtype))
    429 
    430     @classmethod

ValueError: Unexpected option 'yformatter' for NdLayout type across all extensions. No similar options found.

Column
    [0] Markdown(str)
    [1] Row
        [0] Plotly(Figure)
        [1] Row
            [0] HoloViews(DynamicMap)
            [1] Column
                [0] WidgetBox
                    [0] Select(margin=(20, 20, 20, 20), name='neighborhood', options=['Alamo Square', ...], value='Alamo Square', width=250)
                [1] VSpacer()
        [2] Row
            [0] HoloViews(DynamicMap)
            [1] Column
                [0] WidgetBox
                    [0] Select(margin=(20, 20, 20, 20), name='neighborhood', options=['Alamo Square', ...], value='Alamo Square', width=250)
                [1] VSpacer()



Serve the Panel Dashboard
# Serve the# dashboard
# YOUR CODE HERE!
Debugging
Note: Some of the Plotly express plots may not render in the notebook through the panel functions.

However, you can test each plot by uncommenting the following code

# housing_units_per_year()
# average_gross_rent()
# average_sales_price()
# average_price_by_neighborhood()
# top_most_expensive_neighborhoods()
# most_expensive_neighborhoods_rent_sales()
# neighborhood_map().show()
# parallel_categories()
# parallel_coordinates()
# sunburst()
